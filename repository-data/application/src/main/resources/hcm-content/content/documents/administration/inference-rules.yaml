/content/documents/administration/inference-rules:
  jcr:primaryType: hippostd:folder
  jcr:mixinTypes: ['hippo:named', 'mix:versionable']
  jcr:uuid: bff0c478-42d4-4390-8e35-d05db0525fca
  hippo:name: Inference Rules
  hippostd:foldertype: [new-untranslated-folder, new-inference-rules]
  /determine-visitor-interest-type:
    jcr:primaryType: hippo:handle
    jcr:mixinTypes: ['hippo:named', 'mix:referenceable']
    jcr:uuid: 5a4098ae-b165-42de-934f-c31036404f8b
    hippo:name: Determine Visitor Interest Type
    /determine-visitor-interest-type[1]:
      jcr:primaryType: inferenceengine:rulesdocument
      jcr:mixinTypes: ['mix:referenceable']
      jcr:uuid: b351f637-d0e2-4a54-bce3-a8e76d4eb035
      hippo:availability: []
      hippostd:state: draft
      hippostdpubwf:createdBy: admin
      hippostdpubwf:creationDate: 2017-12-04T23:02:45.520+01:00
      hippostdpubwf:lastModificationDate: 2017-12-05T01:52:15.811+01:00
      hippostdpubwf:lastModifiedBy: admin
      hippotranslation:id: 1d758432-3596-4a70-a70d-b9e492f6848b
      hippotranslation:locale: document-type-locale
      inferenceengine:collector: inferenceRulesDemo
      inferenceengine:description: "* Determine Visitor Interest Type based on Request\
        \ URI pattern.\r\n* Keep the counter map for each classification value of\
        \ content interest types. e.g, 'news', 'events', ...\r\n* Whenever a request\
        \ comes, increment the counter map based on the current  interest type.\r\n\
        And, finds the most frequently accessed content interest type as primary targeting\
        \ goal value."
      inferenceengine:expression: "// The primary goal data to infer from various\
        \ inputs.\r\nvar interestType = \"unknown\";\r\n\r\n// Read input variables\r\
        \nvar requestURI = $.request.requestURI;\r\nvar referer = $.request.getHeader(\"\
        Referer\");\r\n\r\n// If it contains either '/events' or '/news', determine\
        \ the goal value accordingly.\r\nfor (var paramName : $.parameterNames) {\r\
        \n    if (!paramName.startsWith(\"uri.mapping.\")) {\r\n        continue;\r\
        \n    }\r\n    var paramValue = $.getParameter(paramName);\r\n    var pair\
        \ = string:split(paramValue, \" :\");\r\n    var type = arrays:get(pair, 0);\r\
        \n    var uri = arrays:get(pair, 1);\r\n\r\n    if (requestURI.contains(uri))\
        \ {\r\n        interestType = type;\r\n        break;\r\n    }\r\n}\r\n\r\n\
        // If the interestType goal value was determined in this request level,\r\n\
        // you can store extra targeting goal data via $.collectorContext.extraData.\r\
        \n// Increment the counter map.\r\n\r\nif ($.hasCollectorContext()) {\r\n\
        \    $.collectorContext.setRequestLevelGoalValue(interestType);\r\n    $.logger.debug(\"\
        Request Level Goal Value: {}\", interestType);\r\n\r\n    var counterMap =\
        \ $.collectorContext.extraData.get(\"counterMap\");\r\n    if (counterMap\
        \ == null) {\r\n        counterMap = counter:newMap();\r\n        $.collectorContext.extraData.put(\"\
        counterMap\", counterMap);\r\n    }\r\n\r\n    // Increment counter for request\
        \ level goal value\r\n    // and get the interestType for the max hit count\
        \ key.\r\n    var maxInterestType =\r\n        counter:incrementAndGetMaxKey(counterMap,\
        \ interestType);\r\n    \r\n    $.logger.debug(\"Extra Counter Map: {} -->\
        \ Max Key: {}\", counterMap, maxInterestType);\r\n    interestType = maxInterestType;\r\
        \n}\r\n\r\n// Also, for integration demo, let's see how you can add/read extra\
        \ attributes.\r\nvar fooConnector = $.getAttribute(\"fooMarketingConnector\"\
        );\r\nvar account = fooConnector != null ? fooConnector.getAccount() : null;\r\
        \nif (account != null) {\r\n    $.logger.debug(\"Account : \" + account);\r\
        \n}\r\n\r\n// Leave a log and return the primary goal value, interestType,\
        \ finally.\r\n$.logger.debug(\"Primary Targeting Goal Value: {}\", interestType);\r\
        \nreturn interestType;"
      inferenceengine:id: rules.demo.visitor.interest.type
      inferenceengine:title: Determine Visitor Interest Type
      /inferenceengine:goalvalue[1]:
        jcr:primaryType: selection:listitem
        selection:key: news
        selection:label: News
      /inferenceengine:icon:
        jcr:primaryType: hippogallerypicker:imagelink
        hippo:docbase: 7cab8f3e-a51b-446e-a373-98735fa88272
        hippo:facets: []
        hippo:modes: []
        hippo:values: []
      /inferenceengine:goalvalue[2]:
        jcr:primaryType: selection:listitem
        selection:key: events
        selection:label: Events
      /inferenceengine:goalvalue[3]:
        jcr:primaryType: selection:listitem
        selection:key: unknown
        selection:label: Unknown
      /inferenceengine:parameter[1]:
        jcr:primaryType: inferenceengine:parameter
        inferenceengine:name: uri.mapping.1
        inferenceengine:value: ['news : /news']
      /inferenceengine:parameter[2]:
        jcr:primaryType: inferenceengine:parameter
        inferenceengine:name: uri.mapping.2
        inferenceengine:value: ['events : /events']
    /determine-visitor-interest-type[2]:
      jcr:primaryType: inferenceengine:rulesdocument
      jcr:mixinTypes: ['mix:referenceable', 'mix:versionable']
      jcr:uuid: 65901ae5-aa77-4f3f-9a41-0e169e717e8f
      hippo:availability: [preview]
      hippostd:state: unpublished
      hippostdpubwf:createdBy: admin
      hippostdpubwf:creationDate: 2017-12-04T23:02:45.520+01:00
      hippostdpubwf:lastModificationDate: 2017-12-05T01:52:09.034+01:00
      hippostdpubwf:lastModifiedBy: admin
      hippotranslation:id: 1d758432-3596-4a70-a70d-b9e492f6848b
      hippotranslation:locale: document-type-locale
      inferenceengine:collector: inferenceRulesDemo
      inferenceengine:description: "* Determine Visitor Interest Type based on Request\
        \ URI pattern.\r\n* Keep the counter map for each classification value of\
        \ content interest types. e.g, 'news', 'events', ...\r\n* Whenever a request\
        \ comes, increment the counter map based on the current  interest type.\r\n\
        And, finds the most frequently accessed content interest type as primary targeting\
        \ goal value."
      inferenceengine:expression: "// The primary goal data to infer from various\
        \ inputs.\r\nvar interestType = \"unknown\";\r\n\r\n// Read input variables\r\
        \nvar requestURI = $.request.requestURI;\r\nvar referer = $.request.getHeader(\"\
        Referer\");\r\n\r\n// If it contains either '/events' or '/news', determine\
        \ the goal value accordingly.\r\nfor (var paramName : $.parameterNames) {\r\
        \n    if (!paramName.startsWith(\"uri.mapping.\")) {\r\n        continue;\r\
        \n    }\r\n    var paramValue = $.getParameter(paramName);\r\n    var pair\
        \ = string:split(paramValue, \" :\");\r\n    var type = arrays:get(pair, 0);\r\
        \n    var uri = arrays:get(pair, 1);\r\n\r\n    if (requestURI.contains(uri))\
        \ {\r\n        interestType = type;\r\n        break;\r\n    }\r\n}\r\n\r\n\
        // If the interestType goal value was determined in this request level,\r\n\
        // you can store extra targeting goal data via $.collectorContext.extraData.\r\
        \n// Increment the counter map.\r\n\r\nif ($.hasCollectorContext()) {\r\n\
        \    $.collectorContext.setRequestLevelGoalValue(interestType);\r\n    $.logger.debug(\"\
        Request Level Goal Value: {}\", interestType);\r\n\r\n    var counterMap =\
        \ $.collectorContext.extraData.get(\"counterMap\");\r\n    if (counterMap\
        \ == null) {\r\n        counterMap = counter:newMap();\r\n        $.collectorContext.extraData.put(\"\
        counterMap\", counterMap);\r\n    }\r\n\r\n    // Increment counter for request\
        \ level goal value\r\n    // and get the interestType for the max hit count\
        \ key.\r\n    var maxInterestType =\r\n        counter:incrementAndGetMaxKey(counterMap,\
        \ interestType);\r\n    \r\n    $.logger.debug(\"Extra Counter Map: {} -->\
        \ Max Key: {}\", counterMap, maxInterestType);\r\n    interestType = maxInterestType;\r\
        \n}\r\n\r\n// Also, for integration demo, let's see how you can add/read extra\
        \ attributes.\r\nvar fooConnector = $.getAttribute(\"fooMarketingConnector\"\
        );\r\nvar account = fooConnector != null ? fooConnector.getAccount() : null;\r\
        \nif (account != null) {\r\n    $.logger.debug(\"Account : \" + account);\r\
        \n}\r\n\r\n// Leave a log and return the primary goal value, interestType,\
        \ finally.\r\n$.logger.debug(\"Primary Targeting Goal Value: {}\", interestType);\r\
        \nreturn interestType;"
      inferenceengine:id: rules.demo.visitor.interest.type
      inferenceengine:title: Determine Visitor Interest Type
      /inferenceengine:goalvalue[1]:
        jcr:primaryType: selection:listitem
        selection:key: news
        selection:label: News
      /inferenceengine:icon:
        jcr:primaryType: hippogallerypicker:imagelink
        hippo:docbase: 7cab8f3e-a51b-446e-a373-98735fa88272
        hippo:facets: []
        hippo:modes: []
        hippo:values: []
      /inferenceengine:goalvalue[2]:
        jcr:primaryType: selection:listitem
        selection:key: events
        selection:label: Events
      /inferenceengine:goalvalue[3]:
        jcr:primaryType: selection:listitem
        selection:key: unknown
        selection:label: Unknown
      /inferenceengine:parameter[1]:
        jcr:primaryType: inferenceengine:parameter
        inferenceengine:name: uri.mapping.1
        inferenceengine:value: ['news : /news']
      /inferenceengine:parameter[2]:
        jcr:primaryType: inferenceengine:parameter
        inferenceengine:name: uri.mapping.2
        inferenceengine:value: ['events : /events']
    /determine-visitor-interest-type[3]:
      jcr:primaryType: inferenceengine:rulesdocument
      jcr:mixinTypes: ['mix:referenceable']
      jcr:uuid: fb348b0b-07b4-4c12-b162-fb7704582000
      hippo:availability: [live]
      hippostd:state: published
      hippostdpubwf:createdBy: admin
      hippostdpubwf:creationDate: 2017-12-04T23:02:45.520+01:00
      hippostdpubwf:lastModificationDate: 2017-12-05T01:52:09.034+01:00
      hippostdpubwf:lastModifiedBy: admin
      hippostdpubwf:publicationDate: 2017-12-05T01:52:24.500+01:00
      hippotranslation:id: 1d758432-3596-4a70-a70d-b9e492f6848b
      hippotranslation:locale: document-type-locale
      inferenceengine:collector: inferenceRulesDemo
      inferenceengine:description: "* Determine Visitor Interest Type based on Request\
        \ URI pattern.\r\n* Keep the counter map for each classification value of\
        \ content interest types. e.g, 'news', 'events', ...\r\n* Whenever a request\
        \ comes, increment the counter map based on the current  interest type.\r\n\
        And, finds the most frequently accessed content interest type as primary targeting\
        \ goal value."
      inferenceengine:expression: "// The primary goal data to infer from various\
        \ inputs.\r\nvar interestType = \"unknown\";\r\n\r\n// Read input variables\r\
        \nvar requestURI = $.request.requestURI;\r\nvar referer = $.request.getHeader(\"\
        Referer\");\r\n\r\n// If it contains either '/events' or '/news', determine\
        \ the goal value accordingly.\r\nfor (var paramName : $.parameterNames) {\r\
        \n    if (!paramName.startsWith(\"uri.mapping.\")) {\r\n        continue;\r\
        \n    }\r\n    var paramValue = $.getParameter(paramName);\r\n    var pair\
        \ = string:split(paramValue, \" :\");\r\n    var type = arrays:get(pair, 0);\r\
        \n    var uri = arrays:get(pair, 1);\r\n\r\n    if (requestURI.contains(uri))\
        \ {\r\n        interestType = type;\r\n        break;\r\n    }\r\n}\r\n\r\n\
        // If the interestType goal value was determined in this request level,\r\n\
        // you can store extra targeting goal data via $.collectorContext.extraData.\r\
        \n// Increment the counter map.\r\n\r\nif ($.hasCollectorContext()) {\r\n\
        \    $.collectorContext.setRequestLevelGoalValue(interestType);\r\n    $.logger.debug(\"\
        Request Level Goal Value: {}\", interestType);\r\n\r\n    var counterMap =\
        \ $.collectorContext.extraData.get(\"counterMap\");\r\n    if (counterMap\
        \ == null) {\r\n        counterMap = counter:newMap();\r\n        $.collectorContext.extraData.put(\"\
        counterMap\", counterMap);\r\n    }\r\n\r\n    // Increment counter for request\
        \ level goal value\r\n    // and get the interestType for the max hit count\
        \ key.\r\n    var maxInterestType =\r\n        counter:incrementAndGetMaxKey(counterMap,\
        \ interestType);\r\n    \r\n    $.logger.debug(\"Extra Counter Map: {} -->\
        \ Max Key: {}\", counterMap, maxInterestType);\r\n    interestType = maxInterestType;\r\
        \n}\r\n\r\n// Also, for integration demo, let's see how you can add/read extra\
        \ attributes.\r\nvar fooConnector = $.getAttribute(\"fooMarketingConnector\"\
        );\r\nvar account = fooConnector != null ? fooConnector.getAccount() : null;\r\
        \nif (account != null) {\r\n    $.logger.debug(\"Account : \" + account);\r\
        \n}\r\n\r\n// Leave a log and return the primary goal value, interestType,\
        \ finally.\r\n$.logger.debug(\"Primary Targeting Goal Value: {}\", interestType);\r\
        \nreturn interestType;"
      inferenceengine:id: rules.demo.visitor.interest.type
      inferenceengine:title: Determine Visitor Interest Type
      /inferenceengine:goalvalue[1]:
        jcr:primaryType: selection:listitem
        selection:key: news
        selection:label: News
      /inferenceengine:icon:
        jcr:primaryType: hippogallerypicker:imagelink
        hippo:docbase: 7cab8f3e-a51b-446e-a373-98735fa88272
        hippo:facets: []
        hippo:modes: []
        hippo:values: []
      /inferenceengine:goalvalue[2]:
        jcr:primaryType: selection:listitem
        selection:key: events
        selection:label: Events
      /inferenceengine:goalvalue[3]:
        jcr:primaryType: selection:listitem
        selection:key: unknown
        selection:label: Unknown
      /inferenceengine:parameter[1]:
        jcr:primaryType: inferenceengine:parameter
        inferenceengine:name: uri.mapping.1
        inferenceengine:value: ['news : /news']
      /inferenceengine:parameter[2]:
        jcr:primaryType: inferenceengine:parameter
        inferenceengine:name: uri.mapping.2
        inferenceengine:value: ['events : /events']
